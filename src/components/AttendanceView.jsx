import React, { useState, useEffect } from 'react';
import { LOP_LIST } from '../hooks/useStudentData'; // ƒê√£ chuy·ªÉn sang hook m·ªõi

const NGANH_MAP = {
  "·∫§u Nhi": [
    "·∫§u Nhi D·ª± B·ªã", "·∫§u Nhi C·∫•p 1", "·∫§u Nhi C·∫•p 2", "·∫§u Nhi C·∫•p 3"
  ],
  "Thi·∫øu Nhi": [
    "Thi·∫øu Nhi C·∫•p 1", "Thi·∫øu Nhi C·∫•p 2", "Thi·∫øu Nhi C·∫•p 3"
  ],
  "Nghƒ©a Sƒ©": [
    "Nghƒ©a Sƒ© C·∫•p 1", "Nghƒ©a Sƒ© C·∫•p 2", "Nghƒ©a Sƒ© C·∫•p 3"
  ],
  "Hi·ªáp Sƒ©": [
    "Hi·ªáp Sƒ© C·∫•p 1", "Hi·ªáp Sƒ© C·∫•p 2"
  ],
  "Huynh Tr∆∞·ªüng": [
    "Hi·ªáp Sƒ© Tr∆∞·ªüng Th√†nh", "Huynh Tr∆∞·ªüng", "Hu·∫•n Luy·ªán Vi√™n"
  ]
};

const NGANH_LIST = Object.keys(NGANH_MAP);

function getSundaysOfMonth(year, month) {
  const sundays = [];
  const daysInMonth = new Date(year, month, 0).getDate();
  for (let d = 1; d <= daysInMonth; d++) {
    const date = new Date(year, month - 1, d);
    if (date.getDay() === 0) {
      sundays.push(date.toISOString().split('T')[0]);
    }
  }
  return sundays;
}

const AttendanceView = ({
  students,
  selectedDate,
  setSelectedDate,
  currentAttendance,
  setCurrentAttendance,
  handleSaveAttendance,
}) => {
  // Ch·ªçn nƒÉm/th√°ng/ng√†nh
  const now = new Date();
  const [selectedYear, setSelectedYear] = useState(now.getFullYear());
  const [selectedMonth, setSelectedMonth] = useState(now.getMonth() + 1);
  const [selectedNganh, setSelectedNganh] = useState("T·∫•t c·∫£");

  // Danh s√°ch nƒÉm/th√°ng
  const yearOptions = [];
  for (let y = now.getFullYear() - 2; y <= now.getFullYear() + 2; y++) yearOptions.push(y);
  const monthOptions = [];
  for (let m = 1; m <= 12; m++) monthOptions.push(m);

  // Ng√†y Ch·ªß Nh·∫≠t
  const sundays = getSundaysOfMonth(selectedYear, selectedMonth);

  useEffect(() => {
    if (!sundays.includes(selectedDate)) {
      setSelectedDate(sundays[0] || "");
    }
    // eslint-disable-next-line
  }, [selectedYear, selectedMonth]);

  // L·ªçc h·ªçc sinh theo ng√†nh
  const filteredStudents = selectedNganh === "T·∫•t c·∫£"
    ? students
    : students.filter(s => NGANH_MAP[selectedNganh]?.includes(s.lop));

  // S·∫Øp x·∫øp theo ƒë·ªôi
  const sortedStudents = [...filteredStudents].sort(
    (a, b) => LOP_LIST.indexOf(a.lop) - LOP_LIST.indexOf(b.lop)
  );

  return (
    <div className="view-container">
      <h2 className="title">ƒêi·ªÉm Danh</h2>
      <div className="form-group grid-cols-2">
        <div>
          <label className="label">NƒÉm</label>
          <select
            value={selectedYear}
            onChange={e => setSelectedYear(Number(e.target.value))}
            className="select-field"
          >
            {yearOptions.map(y => (
              <option key={y} value={y}>{y}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="label">Th√°ng</label>
          <select
            value={selectedMonth}
            onChange={e => setSelectedMonth(Number(e.target.value))}
            className="select-field"
          >
            {monthOptions.map(m => (
              <option key={m} value={m}>{m.toString().padStart(2, '0')}</option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="attendance-date" className="label">Ng√†y ƒêi·ªÉm Danh (Ch·ªß Nh·∫≠t)</label>
          <select
            id="attendance-date"
            value={selectedDate}
            onChange={(e) => setSelectedDate(e.target.value)}
            className="select-field"
          >
            {sundays.map(date => (
              <option key={date} value={date}>{date}</option>
            ))}
          </select>
        </div>
        <div>
          <label htmlFor="nganh-select" className="label">Ch·ªçn Ng√†nh</label>
          <select
            id="nganh-select"
            value={selectedNganh}
            onChange={e => setSelectedNganh(e.target.value)}
            className="select-field"
          >
            <option value="T·∫•t c·∫£">T·∫•t c·∫£</option>
            {NGANH_LIST.map(nganh => (
              <option key={nganh} value={nganh}>{nganh}</option>
            ))}
          </select>
        </div>
      </div>

      {/* B·∫£ng ƒëi·ªÉm danh theo ng√†nh */}
      <div className="table-container">
        <table className="data-table">
          <thead className="table-header">
            <tr>
              <th className="table-cell">T√™n Th√°nh</th>
              <th className="table-cell">H·ªç T√™n</th>
              <th className="table-cell">Ng√†y Sinh</th>
              <th className="table-cell">ƒê·ªôi</th>
              <th className="table-cell">SƒêT</th>
              <th className="table-cell text-center">C√≥ m·∫∑t</th>
              <th className="table-cell text-center">B√≥ Hoa Thi√™ng</th>
              <th className="table-cell text-center">ƒê·ªìng Ph·ª•c</th>
            </tr>
          </thead>
          <tbody>
            {sortedStudents.length > 0 ? (
              sortedStudents.map(student => (
                <tr key={student.id} className="table-row">
                  <td className="table-cell bold">{student.tenThanh}</td>
                  <td className="table-cell">{student.hoTen}</td>
                  <td className="table-cell">{student.ngaySinh}</td>
                  <td className="table-cell">{student.lop}</td>
                  <td className="table-cell">
                    {student.soDienThoaiCha || student.soDienThoaiMe || student.soDienThoai || 'N/A'}
                  </td>
                  <td className="table-cell text-center">
                    <select
                      data-student-id={student.id}
                      data-criterion="present"
                      value={currentAttendance[student.id]?.present || "v·∫Øng m·∫∑t"}
                      onChange={(e) =>
                        setCurrentAttendance({
                          ...currentAttendance,
                          [student.id]: {
                            ...currentAttendance[student.id],
                            present: e.target.value,
                          },
                        })
                      }
                      className="select-field"
                    >
                      <option value="ƒë√∫ng gi·ªù">ƒê√∫ng gi·ªù</option>
                      <option value="tr·ªÖ 15 ph√∫t">Tr·ªÖ 15 ph√∫t</option>
                      <option value="tr·ªÖ 30 ph√∫t">Tr·ªÖ 30 ph√∫t</option>
                      <option value="v·∫Øng m·∫∑t">V·∫Øng m·∫∑t</option>
                    </select>
                  </td>
                  <td className="table-cell text-center">
                    <input
                      type="checkbox"
                      data-student-id={student.id}
                      data-criterion="holyBouquet"
                      checked={currentAttendance[student.id]?.holyBouquet || false}
                      onChange={(e) =>
                        setCurrentAttendance({
                          ...currentAttendance,
                          [student.id]: {
                            ...currentAttendance[student.id],
                            holyBouquet: e.target.checked,
                          },
                        })
                      }
                    />
                  </td>
                  <td className="table-cell text-center">
                    <input
                      type="checkbox"
                      data-student-id={student.id}
                      data-criterion="uniform"
                      checked={currentAttendance[student.id]?.uniform || false}
                      onChange={(e) =>
                        setCurrentAttendance({
                          ...currentAttendance,
                          [student.id]: {
                            ...currentAttendance[student.id],
                            uniform: e.target.checked,
                          },
                        })
                      }
                    />
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="8" className="table-cell text-center italic">
                  Kh√¥ng c√≥ h·ªçc sinh n√†o trong ng√†nh n√†y.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* N√∫t l∆∞u ƒëi·ªÉm danh ƒë·∫πp h∆°n */}
      <div style={{ display: 'flex', justifyContent: 'center', marginTop: 24 }}>
        <button onClick={handleSaveAttendance} className="button-primary" style={{ minWidth: 180, fontSize: 18 }}>
          üíæ L∆∞u ƒêi·ªÉm Danh
        </button>
      </div>
    </div>
  );
};

export default AttendanceView;